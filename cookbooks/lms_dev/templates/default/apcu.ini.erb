; Enable APCu extension module
extension = <%= node['apcu']['extension'] %>

;       This can be set to 0 to disable APCu
apc.enabled=<%= node['apcu']['enabled'] %>

;       Setting this enables APCu for the CLI version of PHP
;       (Mostly for testing and debugging).
;apc.enable_cli=<%= node['apcu']['enable_cli'] %>

;       Sets the path to text files containing caches to load from disk upon
;       initialization of APCu. preload_path should be a directory where each
;       file follows $key.data where $key should be used as the entry name
;       and the contents of the file contains serialized data to use as the value
;       of the entry.
;apc.preload_path=<%= node['apcu']['preload_path'] %>

;       The size of each shared memory segment, with M/G suffixe
apc.shm_size=<%= node['apcu']['shm_size'] %>

;       The number of seconds a cache entry is allowed to idle in a slot in case
;       this cache entry slot is needed by another entry.
apc.ttl=<%= node['apcu']['ttl'] %>

;       The number of seconds that a cache entry may remain on the
;       garbage-collection list.
apc.gc_ttl=<%= node['apcu']['gc_ttl'] %>

;       If you begin to get low on resources, an expunge of the cache
;       is performed if it is less than half full. This is not always
;       a suitable way of determining if an expunge of the cache
;       should be per apc.smart allows you to set a runtime configuration
;       value which     is used to determine if an expunge should be run
;       if (available_size < apc.smart * requested_size)
;apc.smart=<%= node['apcu']['smart'] %>

;       A "hint" about the number variables expected in the cache.
;       Set to zero or omit if you are not sure;
;apc.entries_hint=<%= node['apcu']['entries_hint'] %>

;       The mktemp-style file_mask to pass to the mmap module 
apc.mmap_file_mask=<%= node['apcu']['mmap_file_mask'] %>

;       On very busy servers whenever you start the server or
;       modify files you can create a race of many processes
;       all trying to cache the same data at the same time.
;       By default, APCu attempts to prevent "slamming" of a key.
;       A key is considered "slammed" if it was the last key set,
;       and a context other than the current one set it ( ie. it
;       was set by another process or thread )
apc.slam_defense=<%= node['apcu']['slam_defense'] %>

;       Defines which serializer should be used
;       Default is the standard PHP serializer.
;apc.serializer=<%= node['apcu']['serializer'] %>

;       use the SAPI request start time for TTL
;apc.use_request_time=<%= node['apcu']['use_request_time'] %>

;       Enables APCu handling of signals, such as SIGSEGV, that write core files
;       when signaled. APCu will attempt to unmap the shared memory segment in
;       order to exclude it from the core file
;apc.coredump_unmap=<%= node['apcu']['coredump_unmap'] %>